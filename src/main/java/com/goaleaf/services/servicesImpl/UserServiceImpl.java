package com.goaleaf.services.servicesImpl;

import com.auth0.jwt.JWT;
import com.goaleaf.controllers.AuthController;
import com.goaleaf.entities.*;
import com.goaleaf.entities.DTO.HabitDTO;
import com.goaleaf.entities.DTO.UserDTO;
import com.goaleaf.entities.DTO.pagination.HabitPageDTO;
import com.goaleaf.entities.viewModels.accountsAndAuthorization.*;
import com.goaleaf.repositories.*;
import com.goaleaf.security.EmailNotificationsSender;
import com.goaleaf.security.EmailSender;
import com.goaleaf.services.*;
import com.goaleaf.validators.FileConverter;
import com.goaleaf.validators.UserCredentialsValidator;
import com.goaleaf.validators.exceptions.accountsAndAuthorization.AccountNotExistsException;
import com.goaleaf.validators.exceptions.accountsAndAuthorization.BadCredentialsException;
import com.goaleaf.validators.exceptions.accountsAndAuthorization.EmailExistsException;
import com.goaleaf.validators.exceptions.accountsAndAuthorization.LoginExistsException;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import org.apache.commons.io.FileUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import javax.mail.MessagingException;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static com.auth0.jwt.algorithms.Algorithm.HMAC512;
import static com.goaleaf.security.SecurityConstants.*;


@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private AuthController authController;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private HabitService habitService;
    @Autowired
    private MemberService memberService;
    @Autowired
    private MemberRepository memberRepository;
    @Autowired
    private StatsService statsService;
    @Autowired
    private PostRepository postRepository;
    @Autowired
    private CommentRepository commentRepository;
    @Autowired
    private JwtService jwtService;
    @Autowired
    private HabitRepository habitRepository;

    private UserCredentialsValidator userCredentialsValidator = new UserCredentialsValidator();

    @Autowired
    private BCryptPasswordEncoder bCryptPasswordEncoder;

    @Override
    public Iterable<UserDTO> listAllUsers() {
        return convertManyToDTOs(userRepository.findAll());
    }

    @Override
    public User saveUser(User user) {
        return userRepository.save(user);
    }

    @Override
    public void removeUser(Integer id) {
        userRepository.delete(id);

        Iterable<Habit> userHabits = habitService.findHabitsByCreatorID(id);

        for (Habit habit : userHabits) {
            memberService.removeSpecifiedMember(habit.getId(), habit.getCreatorID());
            habit.setCreatorID(null);
            habit.setCreatorLogin(habit.getCreatorLogin() + "(ACCOUNT_NOT_EXISTS)");
        }
    }

    @Override
    public Boolean checkIfExists(Integer id) {
        if (userRepository.checkIfExists(id) > 0)
            return true;
        else
            return false;
    }

    @Transactional
    @Override
    public UserDTO registerNewUserAccount(RegisterViewModel register)
            throws EmailExistsException, LoginExistsException, BadCredentialsException, MessagingException {

        if (!userCredentialsValidator.isValidEmail(register.emailAddress))
            throw new BadCredentialsException("Wrong email format!");
        if (userRepository.existsByEmailAddress(register.emailAddress))
            throw new BadCredentialsException("Account with email " + register.emailAddress + " address already exists!");
        if (userRepository.existsByLogin(register.login))
            throw new LoginExistsException("Account with login " + register.login + " already exists!");
        if (!userCredentialsValidator.isLoginLengthValid(register.login))
            throw new BadCredentialsException("Login cannot be longer than 20 characters!");
        if (!userCredentialsValidator.isPasswordFormatValid(register.password))
            throw new BadCredentialsException("Password must be at least 6 characters long and cannot contain spaces!");
        if (!userCredentialsValidator.arePasswordsEquals(register))
            throw new BadCredentialsException("Passwords are not equal!");

        register.password = (bCryptPasswordEncoder.encode(register.password));

        EmailNotificationsSender sender = new EmailNotificationsSender();

        sender.sayHello(register.emailAddress, register.login);

        User user = new User();
        user.setLogin(register.login);
        user.setPassword(register.password);
        user.setEmailAddress(register.emailAddress);
        user.setImageCode("");
        user.setNotifications(true);

        Stats stats = statsService.findStatsByDate(new Date());
        if (stats == null) {
            stats = new Stats();
        }
        stats.increaseCreatedAccounts();
        statsService.save(stats);

        User result = userRepository.save(user);

        List<User> users = (List<User>) userRepository.findAll();

        if (users.size() > 1) {

            Habit h = habitRepository.findByHabitTitle("Let's meet Goaleaf!");

            EmailNotificationsSender esender = new EmailNotificationsSender();
            esender.createInAppNotification(result.getId(), "GLFAdministrator invited you to challenge \"" + h.getHabitTitle() + "\"!", "http://www.goaleaf.com/challenge/" + h.getId(), false);
        }

        return convertToDTO(result);
    }

    public UserDTO updateUser(EditUserViewModel model) throws BadCredentialsException {

        User updated = new User();

        Claims claims = Jwts.parser()
                .setSigningKey(SECRET.getBytes(StandardCharsets.UTF_8))
                .parseClaimsJws(model.token).getBody();

        if (findById(Integer.parseInt(claims.getSubject())) != null) {
            User updatingUser = userRepository.findById(Integer.parseInt(claims.getSubject()));


            if (bCryptPasswordEncoder.matches(model.oldPassword, userRepository.findById(Integer.parseInt(claims.getSubject())).getPassword())) {
//                if (!model.emailAddress.isEmpty()) {
//                    if (!userCredentialsValidator.isValidEmail(model.emailAddress)) {
//                        throw new BadCredentialsException("Wrong email format!");
//                    } else {
//                        updatingUser.setEmailAddress(model.emailAddress);
//                    }
//                }
                if (model.newPassword.equals(model.matchingNewPassword)) {
                    if (!userCredentialsValidator.isPasswordFormatValid(model.newPassword)) {
                        throw new BadCredentialsException("Password must be at least 6 characters long and cannot contain spaces!");
                    } else {
                        updatingUser.setPassword(bCryptPasswordEncoder.encode(model.newPassword));
                    }
                } else
                    throw new BadCredentialsException("Passwords are not equal!");
            } else {
                throw new BadCredentialsException("Wrong Password!");
            }

            updated = userRepository.save(updatingUser);
        }
        return convertToDTO(updated);
    }

    public void updateUserImage(EditImageViewModel model) {
        User updatedUser = userRepository.findById(model.id);

        updatedUser.setImageCode(model.imageName);

        saveUser(updatedUser);
    }

    @Override
    public UserDTO findByLogin(String login) {
        return convertToDTO(userRepository.findByLogin(login));
    }

    @Override
    public UserDTO findById(Integer id) {
        return convertToDTO(userRepository.findById(id));
    }

    @Override
    public UserDTO findByEmailAddress(String email) {
        return convertToDTO(userRepository.findByEmailAddress(email));
    }

    @Override
    public Iterable<HabitDTO> getUserFinishedHabits(Integer userID) {
        Iterable<Member> memberList = memberRepository.findAllByUserID(userID);
        User user = userRepository.findById(userID);
        List<Habit> habits = new ArrayList<>(0);

        for (Member m : memberList) {
            if (m.getBanned()) {
                continue;
            }
            Habit h = new Habit();
            h = habitService.getHabitById(m.getHabitID());
            if (h.getFinished()) {
                habits.add(h);
            }
        }

        Iterable<HabitDTO> result = habitService.convertManyToDTOs(habits, false);
        return result;
    }

    @Override
    public Iterable<HabitDTO> getAllMyWonHabits(Integer userID) {
        User user = userRepository.findById(userID);
        Iterable<Member> members = memberRepository.findAllByUserID(userID);
        List<Habit> habits = new ArrayList<>(0);

        for (Member m : members) {
            Habit h = new Habit();
            h = habitService.getHabitById(m.getHabitID());
            if (h.getWinner().equals(user.getLogin())) {
                habits.add(h);
            }
        }

        Iterable<HabitDTO> result = habitService.convertManyToDTOs(habits, false);
        return result;
    }

    @Override
    public Iterable<HabitDTO> getAllMyUnfinishedHabits(Integer userID) {
        Iterable<Member> memberList = memberRepository.findAllByUserID(userID);
        List<Habit> habits = new ArrayList<>(0);

        for (Member m : memberList) {
            if (m.getBanned()) {
                continue;
            }
            Habit h = new Habit();
            h = habitService.getHabitById(m.getHabitID());
            if (!h.getFinished()) {
                habits.add(h);
            }
        }

        Iterable<HabitDTO> result = habitService.convertManyToDTOs(habits, false);
        return result;
    }

    @Override
    public void setNewPassword(PasswordViewModel newPasswords) throws BadCredentialsException {

        Claims claims = Jwts.parser()
                .setSigningKey(PASSWORD_RECOVERY_SECRET.getBytes(StandardCharsets.UTF_8))
                .parseClaimsJws(newPasswords.token).getBody();

        User user = userRepository.findById(Integer.parseInt(claims.getSubject()));

        if (!userCredentialsValidator.isPasswordFormatValid(newPasswords.password))
            throw new BadCredentialsException("Password must be at least 6 characters long and cannot contain spaces!");
        if (!(newPasswords.password.equals(newPasswords.matchingPassword)))
            throw new BadCredentialsException("Passwords are not equal!");

        user.setPassword(bCryptPasswordEncoder.encode(newPasswords.password));
        saveUser(user);
    }

    @Override
    public HttpStatus disableNotifications(ChangeNotificationsViewModel model) {

        User temp = userRepository.findById(model.userID);
        temp.setNotifications(!temp.getNotifications());
        userRepository.save(temp);

        return HttpStatus.OK;
    }

    @Override
    public UserDTO setEmailNotifications(SetEmailNotificationsViewModel model) {
        User temp = userRepository.findById(model.userID);
        temp.setNotifications(model.newNotificationsStatus);
        return convertToDTO(userRepository.save(temp));
    }

    @Override
    public void checkUserCredentials(LoginViewModel userModel) throws AccountNotExistsException, BadCredentialsException {
        if (userRepository.findByLogin(userModel.login) == null) {
            throw new AccountNotExistsException("Account with this login does not exists");
        }
        if (!bCryptPasswordEncoder.matches(userModel.password, userRepository.findByLogin(userModel.login).getPassword())) {
            throw new BadCredentialsException("Wrong password");
        }
    }

    @Override
    public File uploadProfileImage(MultipartFile multipartFile, String token) {

        Claims claims = Jwts.parser()
                .setSigningKey(SECRET.getBytes(StandardCharsets.UTF_8))
                .parseClaimsJws(token).getBody();

        File file = new File("photo");

// Create the file using the touch method of the FileUtils class.
// FileUtils.touch(file);

// Write bytes from the multipart file to disk.
        try {
            FileUtils.writeByteArrayToFile(file, multipartFile.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }

        String fileCode = FileConverter.encodeFileToBase64Binary(file);
        File result = null;

        if (userRepository.findById(Integer.parseInt(claims.getSubject())) == null) {
            throw new RuntimeException("User does not exist!");
        }
        User user = userRepository.findById(Integer.parseInt(claims.getSubject()));
        user.setImageCode(fileCode);
        User response = userRepository.save(user);

        File resultFile = FileConverter.decodeFileFromBase64Binary(response.getImageCode());

        Iterable<Post> posts = postRepository.findAllByCreatorLogin(user.getLogin());
        Iterable<Comment> comments = commentRepository.findAllByUserID(user.getId());
        Iterable<Member> members = memberRepository.findAllByUserID(user.getId());

        for (Post p : posts) {
            p.setCreatorImage(fileCode);
            postRepository.save(p);
        }
        for (Comment c : comments) {
            c.setCreatorImage(fileCode);
            commentRepository.save(c);
        }
        for (Member m : members) {
            m.setImageCode(fileCode);
            memberRepository.save(m);
        }

        return resultFile;

    }

    @Override
    public File getProfilePicture(Integer userID) {

        if (userRepository.findById(userID) == null) {
            throw new RuntimeException("User does not exist!");
        }
        User user = userRepository.findById(userID);

        if (user.getImageCode() == null) {
            throw new RuntimeException("This user has no profile picture!");
        }
        return FileConverter.decodeFileFromBase64Binary(user.getImageCode());
    }

    @Override
    public String getUserImageCode(Integer userID) {
        if (userRepository.findById(userID) == null) {
            throw new RuntimeException("User does not exist!");
        }

        User user = userRepository.findById(userID);
        return user.getImageCode();
    }

    @Override
    public void resetPassword(EmailViewModel model) throws AccountNotExistsException, MessagingException {
        if (findByEmailAddress(model.emailAddress) == null)
            throw new AccountNotExistsException("Account with this email address does not exist!");

        String resetPasswordToken = JWT.create()
                .withSubject(String.valueOf(findByEmailAddress(model.emailAddress).getUserID()))
                .withClaim("Email", model.emailAddress)
                .withExpiresAt(new Date(System.currentTimeMillis() + PASSWORD_RECOVERY_SECRET_EXPIRATION_TIME))
                .sign(HMAC512(PASSWORD_RECOVERY_SECRET.getBytes()));
        jwtService.Validate(resetPasswordToken, PASSWORD_RECOVERY_SECRET);

        EmailSender sender = new EmailSender();
        sender.setSender("goaleaf@gmail.com", "spaghettiCode");
        sender.addRecipient(model.emailAddress);
        sender.setSubject("GoaLeaf Password Reset Request");
        sender.setBody("Hello " + findByEmailAddress(model.emailAddress).getLogin() + "!\n\n" +
                "Here's your confirmation link: http://goaleaf.com/resetpassword/" + resetPasswordToken + "\n\n" +
                "If you have not requested a password reset, ignore this message.\n\n" +
                "Thank you and have a nice day! :)\n\n" +
                "GoaLeaf group");
//        sender.addAttachment("TestFile.txt");
        sender.send();
    }

    @Override
    public HabitPageDTO getFinishedHabitsPaging(Integer pageNr, Integer objectsNr, String token) {
        Claims claims = Jwts.parser()
                .setSigningKey(SECRET.getBytes(StandardCharsets.UTF_8))
                .parseClaimsJws(token).getBody();

        Pageable pageable = new PageRequest(pageNr, objectsNr);
        Page<Habit> page = habitRepository.findAllByFinished(true, pageable);
        Iterable<Habit> list = page.getContent();

        List<HabitDTO> output = new ArrayList<>(0);
        for (Habit h : list) {
            Member member = memberRepository.findByHabitIDAndUserID(h.getId(), Integer.parseInt(claims.getSubject()));
            if (member != null && !h.getWinner().equals(member.getUserLogin())) {
                output.add(habitService.convertToDTO(h));
            }
        }

        return new HabitPageDTO(output, page.getNumber(), page.hasPrevious(), page.hasNext(), page.getTotalPages());
    }

    @Override
    public HabitPageDTO getWonHabitsPaging(Integer pageNr, Integer objectsNr, String token) {
        Claims claims = Jwts.parser()
                .setSigningKey(SECRET.getBytes(StandardCharsets.UTF_8))
                .parseClaimsJws(token).getBody();

        Pageable pageable = new PageRequest(pageNr, objectsNr);
        Page<Habit> page = habitRepository.findAllByFinished(true, pageable);
        Iterable<Habit> list = page.getContent();

        List<HabitDTO> output = new ArrayList<>(0);
        for (Habit h : list) {
            Member member = memberRepository.findByHabitIDAndUserID(h.getId(), Integer.parseInt(claims.getSubject()));
            if (member != null && h.getWinner().equals(member.getUserLogin())) {
                output.add(habitService.convertToDTO(h));
            }
        }

        return new HabitPageDTO(output, page.getNumber(), page.hasPrevious(), page.hasNext(), page.getTotalPages());
    }

    @Override
    public HabitPageDTO getUnFinishedHabitsPaging(Integer pageNr, Integer objectsNr, String token) {
        Claims claims = Jwts.parser()
                .setSigningKey(SECRET.getBytes(StandardCharsets.UTF_8))
                .parseClaimsJws(token).getBody();

        Pageable pageable = new PageRequest(pageNr, objectsNr);
        Iterable<Habit> input = habitRepository.findAllByFinished(false);

        List<HabitDTO> output = new ArrayList<>(0);
        for (Habit h : input) {
            Member member = memberRepository.findByHabitIDAndUserID(h.getId(), Integer.parseInt(claims.getSubject()));
            if (member != null) {
                output.add(habitService.convertToDTO(h));
            }
        }

        int start = pageable.getOffset();
        int end = (start + pageable.getPageSize()) > output.size() ? output.size() : (start + pageable.getPageSize());
        Page<HabitDTO> pages = new PageImpl<HabitDTO>(output.subList(start, end), pageable, output.size());

        return new HabitPageDTO(pages.getContent(), pages.getNumber(), pages.hasPrevious(), pages.hasNext(), pages.getTotalPages());
    }

    private UserDTO convertToDTO(User user) {

        if (user == null) {
            return null;
        }

        UserDTO dto = new UserDTO();

        dto.setEmailAddress(user.getEmailAddress());
        dto.setImageCode(user.getImageCode());
        dto.setLogin(user.getLogin());
        dto.setNotifications(user.getNotifications());
        dto.setUserID(user.getId());

        return dto;
    }

    private Iterable<UserDTO> convertManyToDTOs(Iterable<User> input) {
        List<UserDTO> out = new ArrayList<>(0);

        for (User u : input) {
            out.add(convertToDTO(u));
        }

        Iterable result = out;
        return result;
    }
}
